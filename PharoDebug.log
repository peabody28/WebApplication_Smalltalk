THERE_BE_DRAGONS_HERE
RPackageConflictError: Package/Tag can not be added because it conflicts with package WebApplication-Controllers tag nil
1 August 2023 10:27:40.924 am

VM: Win32 - x86_64 - Win64 - CoInterpreter VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
v9.0.22 - Commit: 421845e1 - Date: 2023-03-30 09:49:26 +0200

Image: Pharo10.0.0 [Build information: Pharo-10.0.0+build.514.sha.06180671d95a16c446fe24e3fedb0916c1bcb31a (64 Bit)]

RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		packageName: 	#'WebApplication-Controllers'
		tagName: 	nil
		package: 	a RPackage(WebApplication-Controllers)
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 9693)
		packages: 	an IdentityDictionary(size 746)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1017)
		debuggingName: 	''
		packageNames: 	a SortedCollection(#'AI-Algorithms-Graph' #'AI-Algorithms-Graph-C...etc...


RPackageOrganizer>>validateCanBeAddedPackage:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		aPackage: 	a RPackage(WebApplication)
		aSymbol: 	'Controllers'
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 9693)
		packages: 	an IdentityDictionary(size 746)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1017)
		debuggingName: 	''
		packageNames: 	a SortedCollection(#'AI-Algorithms-Graph' #'AI-Algorithms-Graph-C...etc...


[ 
			self class organizer 
				validateCanBeAddedPackage: self
				tagName: tagName.
			newTag := self basicAddClassTag: tagName.
			SystemAnnouncer uniqueInstance classTagAdded: tagName inPackage: self.
			^newTag] in RPackage>>addClassTag:
	Receiver: a RPackage(WebApplication)
	Arguments and temporary variables: 
		aSymbol: 	'Controllers'
		tagName: 	'Controllers'
		newTag: 	nil
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary()
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set()
		name: 	#WebApplication
		classTags: 	a Set()


Set(Collection)>>detect:ifFound:ifNone:
	Receiver: a Set()
	Arguments and temporary variables: 
		aBlock: 	[ :each | each name = aSymbol ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ 
			self class organizer 
				validateCanBeAddedPackage: self...etc...
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Set(Collection)>>detect:ifNone:
	Receiver: a Set()
	Arguments and temporary variables: 
		aBlock: 	[ :each | each name = aSymbol ]
		exceptionBlock: 	[ 
			self class organizer 
				validateCanBeAddedPackage: self...etc...
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RPackage>>classTagNamed:ifAbsent:
	Receiver: a RPackage(WebApplication)
	Arguments and temporary variables: 
		aSymbol: 	'Controllers'
		aBlock: 	[ 
			self class organizer 
				validateCanBeAddedPackage: self
				tag...etc...
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary()
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set()
		name: 	#WebApplication
		classTags: 	a Set()


RPackage>>addClassTag:
	Receiver: a RPackage(WebApplication)
	Arguments and temporary variables: 
		newTag: 	nil
		aSymbol: 	'Controllers'
		tagName: 	'Controllers'
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary()
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set()
		name: 	#WebApplication
		classTags: 	a Set()


SycAddNewClassTagCommand>>execute
	Receiver: a SycAddNewClassTagCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		package: 	a RPackage(WebApplication)
		tagName: 	'Controllers'


ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyFullBrowserPackageContext
	Arguments and temporary variables: 
		aCommand: 	a SycAddNewClassTagCommand
		aCommandActivator: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowserMorph(829633024)
		selectedItems: 	an Array(a ClyDataSourceItem(WebApplication))
		metaLevelScope: 	ClyInstanceSideScope


[self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a SycAddNewClassTagCommand)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		command: 	a SycAddNewClassTagCommand
		context: 	a ClyFullBrowserPackageContext
		activationStrategy: 	a CmdContextMenuActivation(CmdRootMenuGroup; 1000)


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCo...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	a CompiledBlock: [self prepareCommandForExecution.
	context executeCom...etc...
		numArgs: 	0
		receiver: 	a CmdCommandActivator(a SycAddNewClassTagCommand)


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a SycAddNewClassTagCommand)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		command: 	a SycAddNewClassTagCommand
		context: 	a ClyFullBrowserPackageContext
		activationStrategy: 	a CmdContextMenuActivation(CmdRootMenuGroup; 1000)


[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
		w: 	a WorldMorph(757016832) [world]
		selArgCount: 	0
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := sel...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	a CompiledBlock: [ | selArgCount |  "show cursor in case item opens a ...etc...
		numArgs: 	0
		receiver: 	a ToggleMenuItemMorph(666343424)'New tag'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |  "show cursor in case item opens a new MVC window"
		...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
		w: 	a WorldMorph(757016832) [world]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(637@263) mouseUp 2071588 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(666343424)'New tag'
	Receiver's instance variables: 
		timeStamp: 	2071588
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(637@263)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a ToggleMenuItemMorph(666343424)'New tag'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(637@263) mouseUp 2071588 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2071588
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(637@263)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a ToggleMenuItemMorph(666343424)'New tag'
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a ToggleMenuItemMorph(666343424)'New tag'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a MenuMorph(645788160)
		localEvt: 	[(637@263) mouseUp 2071588 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(666343424)'New tag'
		morphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMorph...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(637@263) mouseUp 2071588 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2071588
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(637@263)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a MenuMorph(645788160)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a MenuMorph(645788160)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(645788160)
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(558.0@113.0) corner: (718.0@351.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMo...etc...
		fullBounds: 	(558.0@113.0) corner: (718.0@351.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.823069403714565 al...etc...
		extension: 	a MorphExtension (956170752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.6735092864...etc...
		defaultTarget: 	a ClyQueryViewMorph(913812992)
		selectedItem: 	a ToggleMenuItemMorph(666343424)'New tag'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil
		selection: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(645788160)
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(558.0@113.0) corner: (718.0@351.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMo...etc...
		fullBounds: 	(558.0@113.0) corner: (718.0@351.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.823069403714565 al...etc...
		extension: 	a MorphExtension (956170752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.6735092864...etc...
		defaultTarget: 	a ClyQueryViewMorph(913812992)
		selectedItem: 	a ToggleMenuItemMorph(666343424)'New tag'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil
		selection: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(645788160)
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(558.0@113.0) corner: (718.0@351.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMo...etc...
		fullBounds: 	(558.0@113.0) corner: (718.0@351.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.823069403714565 al...etc...
		extension: 	a MorphExtension (956170752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.6735092864...etc...
		defaultTarget: 	a ClyQueryViewMorph(913812992)
		selectedItem: 	a ToggleMenuItemMorph(666343424)'New tag'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil
		selection: 	nil


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(202528768)
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		focusHolder: 	a MenuMorph(645788160)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(757016832) [world]
		transformedEvent: 	[(637@263) mouseUp 2071588 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(739@342) corner: (755@358)
		owner: 	a WorldMorph(757016832) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921595392)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(543836672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(739@342) mouseOver 2072276 nil]
		targetOffset: 	(74.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent: transform...etc...
		numArgs: 	0
		receiver: 	a HandMorph(202528768)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(757016832) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(757016832) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(510456832) a TaskbarMorph(1004835328) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.9403714565004888...etc...
		extension: 	a MorphExtension (707588608) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
RPackageOrganizer>>validateCanBeAddedPackage:tagName:
[ 
			self class organizer 
				validateCanBeAddedPackage: self
				tagName: tagName.
			newTag := self basicAddClassTag: tagName.
			SystemAnnouncer uniqueInstance classTagAdded: tagName inPackage: self.
			^newTag] in RPackage>>addClassTag:
Set(Collection)>>detect:ifFound:ifNone:
Set(Collection)>>detect:ifNone:
RPackage>>classTagNamed:ifAbsent:
RPackage>>addClassTag:
SycAddNewClassTagCommand>>execute
ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
[self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult] in CmdCommandActivator>>executeCommand
FullBlockClosure(BlockClosure)>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[ 
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [ 
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [ 
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [ 
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[
		MorphicRenderLoop new doOneCycleWhile: [ true ]
	] in MorphicUIManager>>spawnNewProcess
[self value.
			"IMPORTANT: Do not step over next line of code. See method comments for details"
			Processor terminateRealActive] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
RPackageConflictError: Package/Tag can not be added because it conflicts with package WebApplication-Controllers tag nil
1 August 2023 10:27:41.052 am

VM: Win32 - x86_64 - Win64 - CoInterpreter VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
v9.0.22 - Commit: 421845e1 - Date: 2023-03-30 09:49:26 +0200

Image: Pharo10.0.0 [Build information: Pharo-10.0.0+build.514.sha.06180671d95a16c446fe24e3fedb0916c1bcb31a (64 Bit)]

RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		packageName: 	#'WebApplication-Controllers'
		tagName: 	nil
		package: 	a RPackage(WebApplication-Controllers)
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 9693)
		packages: 	an IdentityDictionary(size 746)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1017)
		debuggingName: 	''
		packageNames: 	a SortedCollection(#'AI-Algorithms-Graph' #'AI-Algorithms-Graph-C...etc...


RPackageOrganizer>>validateCanBeAddedPackage:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		aPackage: 	a RPackage(WebApplication)
		aSymbol: 	'Controllers'
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 9693)
		packages: 	an IdentityDictionary(size 746)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1017)
		debuggingName: 	''
		packageNames: 	a SortedCollection(#'AI-Algorithms-Graph' #'AI-Algorithms-Graph-C...etc...


[ 
			self class organizer 
				validateCanBeAddedPackage: self
				tagName: tagName.
			newTag := self basicAddClassTag: tagName.
			SystemAnnouncer uniqueInstance classTagAdded: tagName inPackage: self.
			^newTag] in RPackage>>addClassTag:
	Receiver: a RPackage(WebApplication)
	Arguments and temporary variables: 
		aSymbol: 	'Controllers'
		tagName: 	'Controllers'
		newTag: 	nil
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary()
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set()
		name: 	#WebApplication
		classTags: 	a Set()


Set(Collection)>>detect:ifFound:ifNone:
	Receiver: a Set()
	Arguments and temporary variables: 
		aBlock: 	[ :each | each name = aSymbol ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ 
			self class organizer 
				validateCanBeAddedPackage: self...etc...
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Set(Collection)>>detect:ifNone:
	Receiver: a Set()
	Arguments and temporary variables: 
		aBlock: 	[ :each | each name = aSymbol ]
		exceptionBlock: 	[ 
			self class organizer 
				validateCanBeAddedPackage: self...etc...
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RPackage>>classTagNamed:ifAbsent:
	Receiver: a RPackage(WebApplication)
	Arguments and temporary variables: 
		aSymbol: 	'Controllers'
		aBlock: 	[ 
			self class organizer 
				validateCanBeAddedPackage: self
				tag...etc...
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary()
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set()
		name: 	#WebApplication
		classTags: 	a Set()


RPackage>>addClassTag:
	Receiver: a RPackage(WebApplication)
	Arguments and temporary variables: 
		newTag: 	nil
		aSymbol: 	'Controllers'
		tagName: 	'Controllers'
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary()
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set()
		name: 	#WebApplication
		classTags: 	a Set()


SycAddNewClassTagCommand>>execute
	Receiver: a SycAddNewClassTagCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		package: 	a RPackage(WebApplication)
		tagName: 	'Controllers'


ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyFullBrowserPackageContext
	Arguments and temporary variables: 
		aCommand: 	a SycAddNewClassTagCommand
		aCommandActivator: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowserMorph(829633024)
		selectedItems: 	an Array(a ClyDataSourceItem(WebApplication))
		metaLevelScope: 	ClyInstanceSideScope


[self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a SycAddNewClassTagCommand)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		command: 	a SycAddNewClassTagCommand
		context: 	a ClyFullBrowserPackageContext
		activationStrategy: 	a CmdContextMenuActivation(CmdRootMenuGroup; 1000)


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCo...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	a CompiledBlock: [self prepareCommandForExecution.
	context executeCom...etc...
		numArgs: 	0
		receiver: 	a CmdCommandActivator(a SycAddNewClassTagCommand)


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a SycAddNewClassTagCommand)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		command: 	a SycAddNewClassTagCommand
		context: 	a ClyFullBrowserPackageContext
		activationStrategy: 	a CmdContextMenuActivation(CmdRootMenuGroup; 1000)


[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
		w: 	a WorldMorph(757016832) [world]
		selArgCount: 	0
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := sel...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	a CompiledBlock: [ | selArgCount |  "show cursor in case item opens a ...etc...
		numArgs: 	0
		receiver: 	a ToggleMenuItemMorph(666343424)'New tag'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |  "show cursor in case item opens a new MVC window"
		...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
		w: 	a WorldMorph(757016832) [world]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(637@263) mouseUp 2071588 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(666343424)'New tag'
	Receiver's instance variables: 
		timeStamp: 	2071588
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(637@263)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a ToggleMenuItemMorph(666343424)'New tag'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(637@263) mouseUp 2071588 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2071588
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(637@263)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a ToggleMenuItemMorph(666343424)'New tag'
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a ToggleMenuItemMorph(666343424)'New tag'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(666343424)'New tag'
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(563.0@251.0) corner: (713.0@269.0)
		owner: 	a MenuMorph(645788160)
		submorphs: 	#()
		fullBounds: 	(563.0@251.0) corner: (713.0@269.0)
		color: 	Color black
		extension: 	a MorphExtension (758249472)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'New tag'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a SycAddNewClassTagCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a MenuMorph(645788160)
		localEvt: 	[(637@263) mouseUp 2071588 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(666343424)'New tag'
		morphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMorph...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(637@263) mouseUp 2071588 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2071588
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(637@263)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a MenuMorph(645788160)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		aMorph: 	a MenuMorph(645788160)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(645788160)
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(558.0@113.0) corner: (718.0@351.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMo...etc...
		fullBounds: 	(558.0@113.0) corner: (718.0@351.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.823069403714565 al...etc...
		extension: 	a MorphExtension (956170752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.6735092864...etc...
		defaultTarget: 	a ClyQueryViewMorph(913812992)
		selectedItem: 	a ToggleMenuItemMorph(666343424)'New tag'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil
		selection: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(645788160)
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(558.0@113.0) corner: (718.0@351.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMo...etc...
		fullBounds: 	(558.0@113.0) corner: (718.0@351.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.823069403714565 al...etc...
		extension: 	a MorphExtension (956170752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.6735092864...etc...
		defaultTarget: 	a ClyQueryViewMorph(913812992)
		selectedItem: 	a ToggleMenuItemMorph(666343424)'New tag'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil
		selection: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(645788160)
	Arguments and temporary variables: 
		evt: 	[(637@263) mouseUp 2071588 nil]
	Receiver's instance variables: 
		bounds: 	(558.0@113.0) corner: (718.0@351.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381937152)'Browse' a ToggleMenuItemMo...etc...
		fullBounds: 	(558.0@113.0) corner: (718.0@351.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.823069403714565 al...etc...
		extension: 	a MorphExtension (956170752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.6735092864...etc...
		defaultTarget: 	a ClyQueryViewMorph(913812992)
		selectedItem: 	a ToggleMenuItemMorph(666343424)'New tag'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil
		selection: 	nil


[
		result := focusHolder handleFocusEvent: transformedEvent.
	] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(202528768)
	Arguments and temporary variables: 
		anEvent: 	[(637@263) mouseUp 2071588 nil]
		focusHolder: 	a MenuMorph(645788160)
		aBlock: 	[self mouseFocus: nil]
		w: 	a WorldMorph(757016832) [world]
		transformedEvent: 	[(637@263) mouseUp 2071588 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(739@342) corner: (755@358)
		owner: 	a WorldMorph(757016832) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921595392)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(543836672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(739@342) mouseOver 2072276 nil]
		targetOffset: 	(74.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
		result := focusHolder handleFocusEvent: transformedEvent.
	]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
			ActiveWorld := priorWorld.
			ex pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	a CompiledBlock: [
		result := focusHolder handleFocusEvent: transform...etc...
		numArgs: 	0
		receiver: 	a HandMorph(202528768)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(757016832) [world]
	Arguments and temporary variables: 
		aBlock: 	[
		result := focusHolder handleFocusEvent: transformedEvent.
	]
		priorWorld: 	a WorldMorph(757016832) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(510456832) a TaskbarMorph(1004835328) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.9403714565004888...etc...
		extension: 	a MorphExtension (707588608) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
RPackageOrganizer>>validateCanBeAddedPackage:tagName:
[ 
			self class organizer 
				validateCanBeAddedPackage: self
				tagName: tagName.
			newTag := self basicAddClassTag: tagName.
			SystemAnnouncer uniqueInstance classTagAdded: tagName inPackage: self.
			^newTag] in RPackage>>addClassTag:
Set(Collection)>>detect:ifFound:ifNone:
Set(Collection)>>detect:ifNone:
RPackage>>classTagNamed:ifAbsent:
RPackage>>addClassTag:
SycAddNewClassTagCommand>>execute
ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
[self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult] in CmdCommandActivator>>executeCommand
FullBlockClosure(BlockClosure)>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |  "show cursor in case item opens a new MVC window"
		(selArgCount := selector numArgs) = 0
			ifTrue:
				[target perform: selector]
			ifFalse:
				[selArgCount = arguments size
					ifTrue: [target perform: selector withArguments: arguments]
					ifFalse: [target perform: selector withArguments: (arguments copyWith: evt)]].
		self showShortcut.
		self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MousTHERE_BE_DRAGONS_HERE
NotFound: a ClyNotebookPageMorph(549581824) not found in SortedCollection
1 August 2023 10:52:46.94 am

VM: Win32 - x86_64 - Win64 - CoInterpreter VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
v9.0.22 - Commit: 421845e1 - Date: 2023-03-30 09:49:26 +0200

Image: Pharo10.0.0 [Build information: Pharo-10.0.0+build.514.sha.06180671d95a16c446fe24e3fedb0916c1bcb31a (64 Bit)]

SortedCollection(Collection)>>errorNotFound:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		anObject: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


[self errorNotFound: oldObject] in SortedCollection(Collection)>>remove:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		oldObject: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


SortedCollection(OrderedCollection)>>remove:ifAbsent:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		oldObject: 	a ClyNotebookPageMorph(549581824)
		absentBlock: 	[self errorNotFound: oldObject]
		index: 	8
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


SortedCollection(Collection)>>remove:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		oldObject: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


[ 
		self pages remove: aPage.
		self tabSelectorMorph removeTabIndex: removedPageIndex ] in ClyNotebookMorph(SpNotebookMorph)>>removePage:
	Receiver: a ClyNotebookMorph(643088896)
	Arguments and temporary variables: 
		aPage: 	a ClyNotebookPageMorph(549581824)
		removedPageIndex: 	0
	Receiver's instance variables: 
		bounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		owner: 	a PanelMorph(946850816)
		submorphs: 	an Array(a PanelMorph(397004800) a PanelMorph(644462080))
		fullBounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		color: 	Color transparent
		extension: 	a MorphExtension (448408576) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(257501184)
		contentMorph: 	a PanelMorph(397004800)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookP...etc...
		headerMorph: 	a PanelMorph(644462080)
		toolbarMorph: 	a SpNotebookPanelMorph(260494848)


ClyNotebookMorph(SpNotebookMorph)>>suspendAnnouncementsDuring:
	Receiver: a ClyNotebookMorph(643088896)
	Arguments and temporary variables: 
		aBlock: 	[ 
		self pages remove: aPage.
		self tabSelectorMorph removeTabIndex: ...etc...
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
	Receiver's instance variables: 
		bounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		owner: 	a PanelMorph(946850816)
		submorphs: 	an Array(a PanelMorph(397004800) a PanelMorph(644462080))
		fullBounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		color: 	Color transparent
		extension: 	a MorphExtension (448408576) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(257501184)
		contentMorph: 	a PanelMorph(397004800)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookP...etc...
		headerMorph: 	a PanelMorph(644462080)
		toolbarMorph: 	a SpNotebookPanelMorph(260494848)


ClyNotebookMorph(SpNotebookMorph)>>removePage:
	Receiver: a ClyNotebookMorph(643088896)
	Arguments and temporary variables: 
		aPage: 	a ClyNotebookPageMorph(549581824)
		removedPageIndex: 	0
	Receiver's instance variables: 
		bounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		owner: 	a PanelMorph(946850816)
		submorphs: 	an Array(a PanelMorph(397004800) a PanelMorph(644462080))
		fullBounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		color: 	Color transparent
		extension: 	a MorphExtension (448408576) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(257501184)
		contentMorph: 	a PanelMorph(397004800)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookP...etc...
		headerMorph: 	a PanelMorph(644462080)
		toolbarMorph: 	a SpNotebookPanelMorph(260494848)


ClyNotebookManager>>closeTab:
	Receiver: a ClyNotebookManager
	Arguments and temporary variables: 
		tab: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		browser: 	a ClyFullBrowserMorph(829633024)
		tabMorph: 	a ClyNotebookMorph(643088896)
		tools: 	a SortedCollection(a ClyRichTextClassCommentEditorToolMorph(277079040) a...etc...
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary(ClyClassDefinitionEditorToolMorph->1...etc...
		desiredSelection: 	an IdentitySet(ClyClassDefinitionEditorToolMorph RSUMLClassCa...etc...
		shouldSkipCurrentDesiredSelection: 	false


[ self closeTab: tab ] in ClyNotebookManager>>addTool:
	Receiver: a ClyNotebookManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCreationToolMorph(40753152)
		tab: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		browser: 	a ClyFullBrowserMorph(829633024)
		tabMorph: 	a ClyNotebookMorph(643088896)
		tools: 	a SortedCollection(a ClyRichTextClassCommentEditorToolMorph(277079040) a...etc...
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary(ClyClassDefinitionEditorToolMorph->1...etc...
		desiredSelection: 	an IdentitySet(ClyClassDefinitionEditorToolMorph RSUMLClassCa...etc...
		shouldSkipCurrentDesiredSelection: 	false


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ self closeTab: tab ]
	Arguments and temporary variables: 
		anArg: 	a ClyNotebookPageHeaderPresenter
	Receiver's instance variables: 
		outerContext: 	ClyNotebookManager>>addTool:
		startpc: 	a CompiledBlock: [ self closeTab: tab ]
		numArgs: 	0
		receiver: 	a ClyNotebookManager


ClyNotebookPageHeaderPresenter>>doClose
	Receiver: a ClyNotebookPageHeaderPresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		pageMorph: 	a ClyNotebookPageMorph(549581824)
		iconImage: 	a SpImagePresenter
		titleLabel: 	a SpLabelPresenter
		closeImage: 	a SpImagePresenter
		closeAction: 	[ self closeTab: tab ]
		doubleClickAction: 	[ browser toggleFullWindowTabs ]


[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose ] ] in ClyNotebookPageHeaderPresenter>>initializePresenters
	Receiver: a ClyNotebookPageHeaderPresenter
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		pageMorph: 	a ClyNotebookPageMorph(549581824)
		iconImage: 	a SpImagePresenter
		titleLabel: 	a SpLabelPresenter
		closeImage: 	a SpImagePresenter
		closeAction: 	[ self closeTab: tab ]
		doubleClickAction: 	[ browser toggleFullWindowTabs ]


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		sourceMorph: 	an AlphaImageMorph(1054793728)
		arity: 	1
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value:
		recipient: 	[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		eventType: 	#mouseDown
		sourceMorph: 	an AlphaImageMorph(1054793728)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		eventType: 	#mouseDown
		sourceMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(1323@475) mouseDown red 2795055 nil]
		sourceMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


AlphaImageMorph(Morph)>>handleMouseDown:
	Receiver: an AlphaImageMorph(1054793728)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		handler: 	a MorphicEventHandler
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(443361280)
		submorphs: 	#()
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (148449280) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(16x16x32)
		alpha: 	1.0
		cachedForm: 	Form(16x16x32)
		layout: 	#center
		scale: 	1.0
		enabled: 	true
		autoSize: 	true
		getImageSelector: 	#getImage
		model: 	a SpMorphicImageAdapter


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	an AlphaImageMorph(1054793728)
		wasHandled: 	true
		whichButton: 	4


AlphaImageMorph(Morph)>>handleEvent:
	Receiver: an AlphaImageMorph(1054793728)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(443361280)
		submorphs: 	#()
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (148449280) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(16x16x32)
		alpha: 	1.0
		cachedForm: 	Form(16x16x32)
		layout: 	#center
		scale: 	1.0
		enabled: 	true
		autoSize: 	true
		getImageSelector: 	#getImage
		model: 	a SpMorphicImageAdapter


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	an AlphaImageMorph(1054793728)
		globalPt: 	(1323@475)
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		handler: 	an AlphaImageMorph(1054793728)
		inside: 	nil
		lastHandler: 	a TabLabelMorph(438768640)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	an AlphaImageMorph(1054793728)
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		morph: 	nil


AlphaImageMorph(Morph)>>processEvent:using:
	Receiver: an AlphaImageMorph(1054793728)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(443361280)
		submorphs: 	#()
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (148449280) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(16x16x32)
		alpha: 	1.0
		cachedForm: 	Form(16x16x32)
		layout: 	#center
		scale: 	1.0
		enabled: 	true
		autoSize: 	true
		getImageSelector: 	#getImage
		model: 	a SpMorphicImageAdapter


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(443361280)
		globalPt: 	(1323@475)
		localEvt: 	[(1323@475) mouseDown red 2795055 nil]
		index: 	1
		child: 	an AlphaImageMorph(1054793728)
		morphs: 	an Array(an AlphaImageMorph(1054793728))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a TabLabelMorph(438768640)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	a TabLabelMorph(438768640)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(443361280)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(443361280)
	Receiver's instance variables: 
		morph: 	nil


Morph>>processEvent:using:
	Receiver: a Morph(443361280)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(637267456)
		submorphs: 	an Array(an AlphaImageMorph(1054793728))
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488144384) [sticky] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(637267456)
		globalPt: 	(1323@475)
		localEvt: 	[(1323@475) mouseDown red 2795055 nil]
		index: 	2
		child: 	a Morph(443361280)
		morphs: 	an Array(a Morph(926329344) a Morph(443361280))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a TabLabelMorph(438768640)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	a TabLabelMorph(438768640)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(637267456)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher



--- The full stack ---
SortedCollection(Collection)>>errorNotFound:
[self errorNotFound: oldObject] in SortedCollection(Collection)>>remove:
SortedCollection(OrderedCollection)>>remove:ifAbsent:
SortedCollection(Collection)>>remove:
[ 
		self pages remove: aPage.
		self tabSelectorMorph removeTabIndex: removedPageIndex ] in ClyNotebookMorph(SpNotebookMorph)>>removePage:
ClyNotebookMorph(SpNotebookMorph)>>suspendAnnouncementsDuring:
ClyNotebookMorph(SpNotebookMorph)>>removePage:
ClyNotebookManager>>closeTab:
[ self closeTab: tab ] in ClyNotebookManager>>addTool:
FullBlockClosure(BlockClosure)>>cull:
ClyNotebookPageHeaderPresenter>>doClose
[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose ] ] in ClyNotebookPageHeaderPresenter>>initializePresenters
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
AlphaImageMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
AlphaImageMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
AlphaImageMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TabLabelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpNotebookTabSelectorMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ClyNotebookMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ClyFullBrowserMorph(Morph)>>processEvent:using:
ClyFullBrowserMorph(Morph)>>processEvent:
[ :morph | "but allow a submorph to process and override double-click/drag response."
		(morph containsPoint: evt cursorPoint) ifTrue: [ morph processEvent: evt ]
	] in SystemWindow>>mouseDown:
Array(SequenceableCollection)>>do:
SystemWindow(Morph)>>submorphsDo:
SystemWindow>>mouseDown:
SystemWindow(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
SystemWindow(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ anEvent hand isNotNil ]) ifTrue: [
			morphicWorld activeHand handleEvent: anEvent
		]
	] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[ 
		| extraWorldsToDraw |
		extraWorldsToDraw := ExtraWorldListMutex critical: [ 
			                     self extraWorldList ].
		extraWorldsToDraw do: [ :world | world doOneCycle ].

		(self currentWorld isNotNil and: [ 
			 (extraWorldsToDraw includes: self currentWorld) not ]) ifTrue: [ 
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
QuestionWithoutCancelDialogWindow(SystemWindow)>>openModal
PharoLightTheme(UITheme)>>questionWithoutCancelIn:text:title:
MorphicUIManager>>confirm:label:
MorphicUIManager>>confirm:
ClyFullBrowserMorph(Object)>>confirm:
ClyFullBrowserMorph(ClyBrowserMorph)>>confirmDiscardChanges
ClyMethodCreationToolMorph(ClyBrowserToolMorph)>>okToClose
ClyNotebookManager>>closeTab:
[ self closeTab: tab ] in ClyNotebookManager>>addTool:
FullBlockClosure(BlockClosure)>>cull:
ClyNotebookPageHeaderPresenter>>doClose
[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose ] ] in ClyNotebookPageHeaderPresenter>>initializePresenters
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
AlphaImageMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
AlphaImageMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
AlphaImageMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TabLabelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpNotebookTabSelectorMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ClyNotebookMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: a ClyNotebookPageMorph(549581824) not found in SortedCollection
1 August 2023 10:52:47.073 am

VM: Win32 - x86_64 - Win64 - CoInterpreter VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 28d08f23-7eb4-0d00-a74a-9ef702f9ba6c Mar 30 2023
v9.0.22 - Commit: 421845e1 - Date: 2023-03-30 09:49:26 +0200

Image: Pharo10.0.0 [Build information: Pharo-10.0.0+build.514.sha.06180671d95a16c446fe24e3fedb0916c1bcb31a (64 Bit)]

SortedCollection(Collection)>>errorNotFound:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		anObject: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


[self errorNotFound: oldObject] in SortedCollection(Collection)>>remove:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		oldObject: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


SortedCollection(OrderedCollection)>>remove:ifAbsent:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		oldObject: 	a ClyNotebookPageMorph(549581824)
		absentBlock: 	[self errorNotFound: oldObject]
		index: 	8
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


SortedCollection(Collection)>>remove:
	Receiver: a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorph(329891840) a C...etc...
	Arguments and temporary variables: 
		oldObject: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		array: 	an Array(nil nil a ClyNotebookPageMorph(729157120) a ClyNotebookPageMorp...etc...
		firstIndex: 	3
		lastIndex: 	7
		sortBlock: 	[ :a :b | (self tabOrderOf: a) <= (self tabOrderOf: b) ]


[ 
		self pages remove: aPage.
		self tabSelectorMorph removeTabIndex: removedPageIndex ] in ClyNotebookMorph(SpNotebookMorph)>>removePage:
	Receiver: a ClyNotebookMorph(643088896)
	Arguments and temporary variables: 
		aPage: 	a ClyNotebookPageMorph(549581824)
		removedPageIndex: 	0
	Receiver's instance variables: 
		bounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		owner: 	a PanelMorph(946850816)
		submorphs: 	an Array(a PanelMorph(397004800) a PanelMorph(644462080))
		fullBounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		color: 	Color transparent
		extension: 	a MorphExtension (448408576) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(257501184)
		contentMorph: 	a PanelMorph(397004800)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookP...etc...
		headerMorph: 	a PanelMorph(644462080)
		toolbarMorph: 	a SpNotebookPanelMorph(260494848)


ClyNotebookMorph(SpNotebookMorph)>>suspendAnnouncementsDuring:
	Receiver: a ClyNotebookMorph(643088896)
	Arguments and temporary variables: 
		aBlock: 	[ 
		self pages remove: aPage.
		self tabSelectorMorph removeTabIndex: ...etc...
		subscriptions: 	an IdentitySet(an AnnouncementSubscription)
	Receiver's instance variables: 
		bounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		owner: 	a PanelMorph(946850816)
		submorphs: 	an Array(a PanelMorph(397004800) a PanelMorph(644462080))
		fullBounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		color: 	Color transparent
		extension: 	a MorphExtension (448408576) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(257501184)
		contentMorph: 	a PanelMorph(397004800)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookP...etc...
		headerMorph: 	a PanelMorph(644462080)
		toolbarMorph: 	a SpNotebookPanelMorph(260494848)


ClyNotebookMorph(SpNotebookMorph)>>removePage:
	Receiver: a ClyNotebookMorph(643088896)
	Arguments and temporary variables: 
		aPage: 	a ClyNotebookPageMorph(549581824)
		removedPageIndex: 	0
	Receiver's instance variables: 
		bounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		owner: 	a PanelMorph(946850816)
		submorphs: 	an Array(a PanelMorph(397004800) a PanelMorph(644462080))
		fullBounds: 	(348.0@744.0) corner: (1381.0@1035.0)
		color: 	Color transparent
		extension: 	a MorphExtension (448408576) [other:  (announcer -> an Announcer) (k...etc...
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(257501184)
		contentMorph: 	a PanelMorph(397004800)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(729157120) a ClyNotebookP...etc...
		headerMorph: 	a PanelMorph(644462080)
		toolbarMorph: 	a SpNotebookPanelMorph(260494848)


ClyNotebookManager>>closeTab:
	Receiver: a ClyNotebookManager
	Arguments and temporary variables: 
		tab: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		browser: 	a ClyFullBrowserMorph(829633024)
		tabMorph: 	a ClyNotebookMorph(643088896)
		tools: 	a SortedCollection(a ClyRichTextClassCommentEditorToolMorph(277079040) a...etc...
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary(ClyClassDefinitionEditorToolMorph->1...etc...
		desiredSelection: 	an IdentitySet(ClyClassDefinitionEditorToolMorph RSUMLClassCa...etc...
		shouldSkipCurrentDesiredSelection: 	false


[ self closeTab: tab ] in ClyNotebookManager>>addTool:
	Receiver: a ClyNotebookManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCreationToolMorph(40753152)
		tab: 	a ClyNotebookPageMorph(549581824)
	Receiver's instance variables: 
		browser: 	a ClyFullBrowserMorph(829633024)
		tabMorph: 	a ClyNotebookMorph(643088896)
		tools: 	a SortedCollection(a ClyRichTextClassCommentEditorToolMorph(277079040) a...etc...
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary(ClyClassDefinitionEditorToolMorph->1...etc...
		desiredSelection: 	an IdentitySet(ClyClassDefinitionEditorToolMorph RSUMLClassCa...etc...
		shouldSkipCurrentDesiredSelection: 	false


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ self closeTab: tab ]
	Arguments and temporary variables: 
		anArg: 	a ClyNotebookPageHeaderPresenter
	Receiver's instance variables: 
		outerContext: 	ClyNotebookManager>>addTool:
		startpc: 	a CompiledBlock: [ self closeTab: tab ]
		numArgs: 	0
		receiver: 	a ClyNotebookManager


ClyNotebookPageHeaderPresenter>>doClose
	Receiver: a ClyNotebookPageHeaderPresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		pageMorph: 	a ClyNotebookPageMorph(549581824)
		iconImage: 	a SpImagePresenter
		titleLabel: 	a SpLabelPresenter
		closeImage: 	a SpImagePresenter
		closeAction: 	[ self closeTab: tab ]
		doubleClickAction: 	[ browser toggleFullWindowTabs ]


[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose ] ] in ClyNotebookPageHeaderPresenter>>initializePresenters
	Receiver: a ClyNotebookPageHeaderPresenter
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		pageMorph: 	a ClyNotebookPageMorph(549581824)
		iconImage: 	a SpImagePresenter
		titleLabel: 	a SpLabelPresenter
		closeImage: 	a SpImagePresenter
		closeAction: 	[ self closeTab: tab ]
		doubleClickAction: 	[ browser toggleFullWindowTabs ]


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		sourceMorph: 	an AlphaImageMorph(1054793728)
		arity: 	1
	Receiver's instance variables: 
		event: 	#mouseDown
		selector: 	#value:
		recipient: 	[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		eventType: 	#mouseDown
		sourceMorph: 	an AlphaImageMorph(1054793728)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		eventType: 	#mouseDown
		sourceMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseDown:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(1323@475) mouseDown red 2795055 nil]
		sourceMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseDown->a Set(a MorphEventSubscription) )


AlphaImageMorph(Morph)>>handleMouseDown:
	Receiver: an AlphaImageMorph(1054793728)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		handler: 	a MorphicEventHandler
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(443361280)
		submorphs: 	#()
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (148449280) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(16x16x32)
		alpha: 	1.0
		cachedForm: 	Form(16x16x32)
		layout: 	#center
		scale: 	1.0
		enabled: 	true
		autoSize: 	true
		getImageSelector: 	#getImage
		model: 	a SpMorphicImageAdapter


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	an AlphaImageMorph(1054793728)
		wasHandled: 	true
		whichButton: 	4


AlphaImageMorph(Morph)>>handleEvent:
	Receiver: an AlphaImageMorph(1054793728)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(443361280)
		submorphs: 	#()
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (148449280) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(16x16x32)
		alpha: 	1.0
		cachedForm: 	Form(16x16x32)
		layout: 	#center
		scale: 	1.0
		enabled: 	true
		autoSize: 	true
		getImageSelector: 	#getImage
		model: 	a SpMorphicImageAdapter


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	an AlphaImageMorph(1054793728)
		globalPt: 	(1323@475)
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		handler: 	an AlphaImageMorph(1054793728)
		inside: 	nil
		lastHandler: 	a TabLabelMorph(438768640)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	an AlphaImageMorph(1054793728)
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	an AlphaImageMorph(1054793728)
	Receiver's instance variables: 
		morph: 	nil


AlphaImageMorph(Morph)>>processEvent:using:
	Receiver: an AlphaImageMorph(1054793728)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(443361280)
		submorphs: 	#()
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (148449280) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(16x16x32)
		alpha: 	1.0
		cachedForm: 	Form(16x16x32)
		layout: 	#center
		scale: 	1.0
		enabled: 	true
		autoSize: 	true
		getImageSelector: 	#getImage
		model: 	a SpMorphicImageAdapter


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(443361280)
		globalPt: 	(1323@475)
		localEvt: 	[(1323@475) mouseDown red 2795055 nil]
		index: 	1
		child: 	an AlphaImageMorph(1054793728)
		morphs: 	an Array(an AlphaImageMorph(1054793728))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a TabLabelMorph(438768640)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	a TabLabelMorph(438768640)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(443361280)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(443361280)
	Receiver's instance variables: 
		morph: 	nil


Morph>>processEvent:using:
	Receiver: a Morph(443361280)
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		owner: 	a Morph(637267456)
		submorphs: 	an Array(an AlphaImageMorph(1054793728))
		fullBounds: 	(1315.0@463.0) corner: (1331.0@481.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488144384) [sticky] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(637267456)
		globalPt: 	(1323@475)
		localEvt: 	[(1323@475) mouseDown red 2795055 nil]
		index: 	2
		child: 	a Morph(443361280)
		morphs: 	an Array(a Morph(926329344) a Morph(443361280))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a TabLabelMorph(438768640)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1323@475) mouseDown red 2795055 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2795055
		source: 	a HandMorph(202528768)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(1323@475)
		handler: 	a TabLabelMorph(438768640)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1323@475) mouseDown red 2795055 nil]
		aMorph: 	a Morph(637267456)
	Receiver's instance variables: 
		morph: 	nil


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	a CompiledBlock: [ ^ anEvent sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher



--- The full stack ---
SortedCollection(Collection)>>errorNotFound:
[self errorNotFound: oldObject] in SortedCollection(Collection)>>remove:
SortedCollection(OrderedCollection)>>remove:ifAbsent:
SortedCollection(Collection)>>remove:
[ 
		self pages remove: aPage.
		self tabSelectorMorph removeTabIndex: removedPageIndex ] in ClyNotebookMorph(SpNotebookMorph)>>removePage:
ClyNotebookMorph(SpNotebookMorph)>>suspendAnnouncementsDuring:
ClyNotebookMorph(SpNotebookMorph)>>removePage:
ClyNotebookManager>>closeTab:
[ self closeTab: tab ] in ClyNotebookManager>>addTool:
FullBlockClosure(BlockClosure)>>cull:
ClyNotebookPageHeaderPresenter>>doClose
[ :anEvent | 
			anEvent isPrimaryButton 
				ifTrue: [ self doClose ] ] in ClyNotebookPageHeaderPresenter>>initializePresenters
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseDown:fromMorph:
AlphaImageMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
AlphaImageMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
AlphaImageMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TabLabelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpNotebookTabSelectorMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ClyNotebookMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ClyFullBrowserMorph(Morph)>>processEvent:using:
ClyFullBrowserMorph(Morph)>>processEvent:
[ :morph | "but allow a submorph to process and override double-click/drag response."
		(morph containsPoint: evt cursorPoint) ifTrue: [ morph processEvent: evt ]
	] in SystemWindow>>mouseDown:
Array(SequenceableCollection)